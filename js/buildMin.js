function Updater() { } var upData = { interval: "", started: !1 }; Updater.prototype.getState = function () { return upData.started }; Updater.prototype.startUpdater = function () { upData.interval = window.setInterval("updater.updateDetails();", 1E3); upData.started = !0 }; Updater.prototype.stopUpdater = function () { window.clearInterval(upData.interval); upData.started = !1 }; stopUpdater = function () { window.clearInterval(upData.interval); upData.started = !1 }; Updater.prototype.updateDetails = function () { $.ajax({ url: "http://" + plData.ip + ":" + plData.port + "/requests/status.xml", dataType: "xml", beforeSend: function (a) { a.setRequestHeader("Authorization", "Basic " + btoa(plData.username + ":" + plData.password)) }, timeout: 5E3, success: function (a, b, c) { $(a).find("root").each(function () { var a = 0, b = 0; $(this).find("volume").each(function () { $("#volume").text(2 * Math.round(Number($(this).text()) / 5.12) + "%"); "0" !== $(this).text() && (plData = returnNamespace(), plData.currentVolume = $(this).text()) }); $(this).find("repeat").each(function () { "true" === $(this).text() ? $("#repeat").removeClass("repeat").addClass("re-active") : $("#repeat").removeClass("re-active").addClass("repeat") }); $(this).find("loop").each(function () { "true" === $(this).text() ? $("#repeat-all").removeClass("repeat-all").addClass("re-all-active") : $("#repeat-all").removeClass("re-all-active").addClass("repeat-all") }); $(this).find("random").each(function () { "true" === $(this).text() ? $("#random").removeClass("random").addClass("ra-active") : $("#random").removeClass("ra-active").addClass("random") }); $(this).find("state").each(function () { plData = returnNamespace(); var a = $(this).text(); plData.state = a; "playing" === a ? -1 !== $(".playpause").attr("class").indexOf("play") ? $(".playpause").removeClass("play").addClass("pause") : $(".playpause").addClass("pause") : "paused" === a ? -1 !== $(".playpause").attr("class").indexOf("pause") ? $(".playpause").removeClass("pause").addClass("play") : $(".playpause").addClass("play") : (-1 !== $(".playpause").attr("class").indexOf("pause") ? $(".playpause").removeClass("pause").addClass("play") : $(".playpause").addClass("play"), $("#positionSlider").val(0).slider("refresh")) }); $(this).find("time").each(function () { a = $(this).text() }); $(this).find("length").each(function () { b = $(this).text() }); $("#positionSlider").attr("max", b); $("#positionSlider").val(Number(a)).slider("refresh"); $("#currentTime").text(format_time(a)); $("#totalTime").text(format_time(b)); a === b && $("#positionSlider").val(0).slider("refresh") }); $(a).find("information").each(function () { $(this).find("category").each(function () { "meta" === $(this).attr("name") && $(this).find("info").each(function () { switch ($(this).attr("name")) { case "title": var a = $(this).text(); 0 < a.length ? $("#title").text(a) : $("#title").text(""); break; case "filename": a = $(this).text(); 0 < a.length ? $("#filename").text(a) : $("#filename").text(""); break; case "artist": a = $(this).text(); 0 < a.length ? $("#artist").text(a) : $("#artist").text(""); break; case "album": a = $(this).text(); 0 < a.length ? $("#album").text(a) : $("#album").text(""); break; case "date": a = $(this).text(), 0 < a.length ? $("#year").text(a) : $("#year").text("") } }) }) }) }, error: function (a, b, c) { } }) }; function Player() { } function rawurlencode(a) { a = (a + "").toString(); return encodeURIComponent(a).replace(/!/g, "%21").replace(/'/g, "%27").replace(/\(/g, "%28").replace(/\)/g, "%29").replace(/\*/g, "%2A") } function format_time(a) { var b = Math.floor(a / 3600), c = Math.floor(a / 60 % 60); a = Math.floor(a % 60); return (10 > b ? "0" + b : b) + ":" + (10 > c ? "0" + c : c) + ":" + (10 > a ? "0" + a : a) } var plData = { ip: "", port: "", username: "", password: "", location: "", lastDir: void 0, startLocation: "none", state: "stopped", currentVolume: 0, volumeBeforeMuted: 0, connected: !1, foundDir: !1, cfCaller: "", updaterStarted: !1, allowedTypes: "3ga a52 aac ac3 ape awb dts flac it m4a m4p mka mlp mod mp1 mp2 mp3 oga ogg oma s3m spx thd tta wav wma wv xm asf avi divx drc dv f4v flv gxf iso m1v m2v m2t m2ts m4v mkv mov mp2 mp4 mpeg mpeg1 mpeg2 mpeg4 mpg mts mtv mxf mxg nuv ogg ogm ogv ogx ps rec rm rmvb ts vob wmv asx b4s cue ifo m3u m3u8 pls ram rar sdp vlc xspf zip conf".split(" ") }, plLang = {}; function returnNamespace() { return plData } function messageCallback() { } showError = function (a) { alert(a, messageCallback, "Error", "Ok") }; showMessage = function (a) { alert(a, messageCallback, "Message", "Ok") }; Player.prototype.play = function () { "paused" === plData.state ? this.sendCommand({ command: "pl_forceresume" }) : "stopped" === plData.state && this.sendCommand({ command: "pl_play" }) }; Player.prototype.stop = function () { this.sendCommand({ command: "pl_stop" }) }; Player.prototype.pause = function () { this.sendCommand({ command: "pl_pause" }) }; Player.prototype.previous = function () { this.sendCommand({ command: "pl_previous" }) }; Player.prototype.forward = function () { this.sendCommand({ command: "pl_next" }) }; Player.prototype.repeat = function () { this.sendCommand({ command: "pl_repeat" }) }; Player.prototype.repeatAll = function () { this.sendCommand({ command: "pl_loop" }) }; Player.prototype.random = function () { this.sendCommand({ command: "pl_random" }) }; Player.prototype.volume = function (a) { var b = $("#volume").text(), b = b.substring(0, b.length - 1); a = Math.round(5.12 * Number(b) + 10.24 * a); a = Math.round(a / 2); this.sendCommand("command=volume&val=" + a); $("#volume").text(2 * Math.round(a / 5.12) + "%") }; Player.prototype.mute = function () { "0%" !== $("#volume").text() ? (plData.volumeBeforeMuted = plData.currentVolume, this.sendCommand("command=volume&val=0"), $("#volume").css("color", "grey")) : (this.sendCommand("command=volume&val=" + plData.volumeBeforeMuted), $("#volume").css("color", "white")); this.updateDetails() }; Player.prototype.jumpTo = function (a) { this.sendCommand("command=seek&val=" + a); $("#positionSlider").val(Number(a)).slider("refresh") }; Player.prototype.clearPlaylist = function () { this.sendCommand({ command: "pl_empty" }); $("#playlist #playlistfiles li").remove() }; Player.prototype.sendCommand = function (a, b) { console.log(a); $.ajax({ url: "http://" + plData.ip + ":" + plData.port + "/requests/status.xml", data: a, beforeSend: function (a) { a.setRequestHeader("Authorization", "Basic " + btoa(plData.username + ":" + plData.password)) }, timeout: 5E3, success: function (a, b, e) { }, error: function (a) { console.log("fail") } }) }; checkConnection = function () { $("#settings #settingsPopup").css("display", "block"); null != navigator.userAgent.match(/Windows Phone/) ? cordova.exec(checkFolder, connectionError, "BasicAuth", "get", [plData.ip, plData.port, plData.username, plData.password]) : $.ajax({ url: "http://" + plData.ip + ":" + plData.port + "/requests/status.xml", beforeSend: function (a) { a.setRequestHeader("Authorization", "Basic " + btoa(plData.username + ":" + plData.password)) }, dataType: "xml", timeout: 5E3, success: function (a, b, c) { console.log("Success: " + a); 0 < $(a).find("root").length ? checkFolder() : ($("#settings #settingsPopup").css("display", "none"), $("#player #playerPopup").css("display", "none"), showError(plLang.checkIpAndPort), player.clearSettings("error"), $(".ui-btn-active").removeClass("ui-btn-active")) }, error: function (a, b, c) { console.log("hi"); console.log(a.status); console.log(b); console.log(c); "timeout" === c && ($("#settings #settingsPopup").css("display", "none"), $("#player #playerPopup").css("display", "none")); 401 === $(a.status).get(0) ? showError(plLang.usernameOrPasswordWrong) : ($("#settings #settingsPopup").css("display", "none"), $("#playerPopup").css("display", "none"), showError(plLang.checkIpAndPort), player.clearSettings("error")); $(".ui-btn-active").removeClass("ui-btn-active") } }) }; connectionError = function () { $("#settings #settingsPopup").css("display", "none"); $("#playerPopup").css("display", "none"); showError(plLang.checkSettings); $(".ui-btn-active").removeClass("ui-btn-active"); player.clearSettings("error") }; checkFolder = function () { console.log("cf"); $.ajax({ url: "http://" + plData.ip + ":" + plData.port + "/requests/browse.xml", data: "uri=" + rawurlencode(plData.location), beforeSend: function (a) { a.setRequestHeader("Authorization", "Basic " + btoa(plData.username + ":" + plData.password)) }, timeout: 5E3, success: function (a, b, c) { if (0 < $(a).find("root").length) { ns = returnNamespace(); if ("load" === ns.cfCaller) player.loadSettings(); else if ("save" === ns.cfCaller) player.saveSettings(); else if ("setHome" === ns.cfCaller) return !0; $("#settings #settingsPopup").css("display", "none") } else $("#settings #settingsPopup").css("display", "none"), showError(plLang.connectedNoDir), player.clearSettings("error") }, error: function (a) { $("#settings #settingsPopup").css("display", "none"); showError(plLang.connectedNoDir); player.clearSettings("error") } }); $(".ui-btn-active").removeClass("ui-btn-active") }; Player.prototype.getSettings = function () { plData.ip = $("#ip").val(); plData.port = $("#port").val(); plData.password = $("#password").val(); plData.username = $("#username").val(); plData.location = "" !== plData.location ? "file://" + $("#location").val() : "file://~"; plData.cfCaller = "save"; checkConnection() }; Player.prototype.saveSettings = function () { window.localStorage.setItem("vlcip", plData.ip); window.localStorage.setItem("vlcport", plData.port); window.localStorage.setItem("location", plData.location); window.localStorage.setItem("username", plData.username); window.localStorage.setItem("password", plData.password); window.localStorage.setItem("notFirstRun", "true"); showMessage(plLang.settingsSaved); $(".ui-btn-active").removeClass("ui-btn-active"); this.loadHelper() }; Player.prototype.loadHelper = function () { var a = window.localStorage.getItem("notFirstRun"); if (null !== a && -1 < a.indexOf("true")) try { plData.ip = window.localStorage.getItem("vlcip"), plData.port = window.localStorage.getItem("vlcport"), plData.location = window.localStorage.getItem("location"), plData.username = window.localStorage.getItem("username"), plData.password = window.localStorage.getItem("password"), plData.cfCaller = "load", checkConnection(), !1 === updater.getState() && $("#playerPopup").css("display", "block") } catch (b) { console.log("err") } else showMessage(plLang.setSettings), $.mobile.changePage("#settings", "slide", !0, !0), $(".dot-active").removeClass("dot-active"), $(".settingsDot").addClass("dot-active") }; Player.prototype.loadSettings = function () { $("#settings #ip").val(plData.ip); $("#settings #port").val(plData.port); var a = plData.location; "file://" === a ? a = a.replace("file://", "") : "file://~" === a && (a = a.replace("file://~", "")); $("#settings #location").val(a); $("#playerPopup").css("display", "none"); updater.updateDetails(); !1 === updater.getState() && updater.startUpdater() }; Player.prototype.clearSettings = function (a) { plData.location = ""; "error" !== a && (showMessage(plLang.settingsSavedRestart), window.localStorage.clear(), $("#settings #ip").val(null), $("#settings #port").val(null), $("#settings #location").val(null), $("#settings #username").val(null), $("#settings #password").val(null), $(".ui-btn-active").removeClass("ui-btn-active"), plData = null) }; Player.prototype.loadPlaylist = function () { $.ajax({ url: "http://" + plData.ip + ":" + plData.port + "/requests/playlist.xml", dataType: "xml", beforeSend: function (a) { a.setRequestHeader("Authorization", "Basic " + btoa(plData.username + ":" + plData.password)) }, timeout: 5E3, success: function (a, b, c) { $("li.item").remove(); $(a).find("leaf").each(function () { var a = $(this).attr("id"), b = '<li class="item">' + $(this).attr("name") + "</li>"; $(b).hammer().bind("tap", { id: a }, function (a) { player.sendCommand("command=pl_play&id=" + a.data.id) }).bind("hold", { id: a }, function (a) { $("#playlistItemPopup").css("display", "block"); a = a.data.id; $("#removeItem").remove(); $('<a href="#" id="removeItem" class="wp8-styled-button" >Remove Item</a>').bind("click", { id: a }, function (a) { a.preventDefault(); player.sendCommand("command=pl_delete&id=" + a.data.id); player.loadPlaylist() }).appendTo("#playlistItemPopup") }).appendTo("#playlistfiles") }); $(".item").addClass("ui-li ui-li-static ui-btn-up-a ui-first-child ui-last-child") }, error: function (a, b, c) { console.log("loadPlaylist"); !0 === updater.getState && (showError(plLang.lostConnection), updater.stopUpdater()) } }) }; Player.prototype.loadFiles = function (a) { a = void 0 == a ? plData.location : a; console.log(a !== plData.lastDir); console.log(plData.location); $("li.item").remove(); $.ajax({ url: "http://" + plData.ip + ":" + plData.port + "/requests/browse.xml", data: "uri=" + rawurlencode(a), dataType: "xml", beforeSend: function (a) { a.setRequestHeader("Authorization", "Basic " + btoa(plData.username + ":" + plData.password)) }, timeout: 5E3, success: function (b, c, d) { 0 < $(b).find("element").length ? ($(b).find("element").each(function () { var a = $(this).attr("type"), b = $(this).attr("uri"); b.substring(b.length - 2); b = b.substring(b.length - 8); b = b.substring(b.indexOf(".") + 1).toLowerCase(); plData = returnNamespace(); "dir" === a ? (a = '<li class="item">' + $(this).attr("name") + "</li>", $(a).hammer().bind("tap", { uri: $(this).attr("uri") }, function (a) { player.loadFiles(a.data.uri) }).bind("hold", { uri: $(this).attr("uri") }, function (a) { var b = a.data.uri; $("#itemPopup").css("display", "block"); $("#playallLocation").text(b.replace("file://", "")); $("#playAll").remove(); $('<a href="#" id="playAll" class="wp8-styled-button" data-role="button">Play All</a>').bind("click", { uri: b }, function () { a.preventDefault(); player.playAll(a.data.uri) }).appendTo("#itemPopup"); $("#setHome").remove(); $('<a href="#" id="setHome" class="wp8-styled-button" data-role="button">Set marked folder as home</a>').bind("click", { uri: b }, function () { a.preventDefault(); player.setHome(a.data.uri) }).appendTo("#itemPopup") }).appendTo("#filelist")) : "file" === a && -1 < plData.allowedTypes.indexOf(b) && (a = '<li class="item">' + $(this).attr("name") + "</li>", $(a).hammer().bind("tap", { uri: $(this).attr("uri") }, function (a) { a = "in_play&input=" + rawurlencode(a.data.uri); player.sendCommand("command=" + a) }).appendTo("#filelist")) }), plData.lastDir = a) : $('<li class="item">..</li>').hammer().bind("tap", function (a) { player.loadFiles(plData.lastDir) }).appendTo("#filelist"); $(".item").addClass("ui-li ui-li-static ui-btn-up-a ui-first-child ui-last-child") }, error: function (a, c, d) { console.log("loadFiles"); !0 === updater.getState && (showError(plLang.lostConnection), updater.stopUpdater()) } }) }; Player.prototype.setHome = function (a) { window.localStorage.setItem("location", a); plData.location = a; plData.cfCaller = "setHome"; this.checkFolder() && showMessage(plLang.settingsSavedRestart) }; Player.prototype.playAll = function (a) { this.clearPlaylist(); $.ajax({ url: "http://" + plData.ip + ":" + plData.port + "/requests/browse.xml", data: "uri=" + rawurlencode(a), dataType: "xml", beforeSend: function (a) { a.setRequestHeader("Authorization", "Basic " + btoa(plData.username + ":" + plData.password)) }, timeout: 5E3, success: function (a, c, d) { $(a).find("element").each(function () { var a = $(this).attr("type"), b = $(this).attr("uri"), c = b.substring(b.length - 2), d = b.substring(b.length - 8), d = d.substring(d.indexOf(".") + 1).toLowerCase(); plData = returnNamespace(); "dir" === a && ".." !== c ? player.playAll(b) : "file" === a && -1 < plData.allowedTypes.indexOf(d) && (a = "in_enqueue&input=" + rawurlencode(b), player.sendCommand("command=" + a)) }) }, error: function (a, c, d) { console.log(d) } }); this.sendCommand({ command: "pl_play" }) }; function Languages() { } var english = { checkIpAndPort: "Couldn't connect. Please check IP and Port.", usernameOrPasswordWrong: "Ups, the username or password must be wrong", checkSettings: "There is an error in your settings - sorry can't be more specific here.", connectedNoDir: "Connected, but couldn't find choosen directory", settingsSaved: "Settings saved", settingsSavedRestart: "Settings saved, please restart the app.", setSettings: "Please set settings.", lostConnection: "Lost connection." }, german = { player: "Player", title: "Titel", artist: "K\u00fcnstler", album: "Album", year: "Jahr", ppHeadline: "Verbindet mit VLC", ppMessage: "Bitte warten", clearPlaylist: "Wiedergabeliste l\u00f6schen", pipHeadline: "Wiedergabeliste-Funktionen", removeItem: "Titel entfernen", playlist: "Wiedergabeliste", library: "Bibliothek", playAll: "Alle wiedergeben", setHomefolder: "Markierten Ordner als Startpunkt setzen", settings: "Einstellungen", spHeadline: "Verbindet mit VLC", spMessage: "Bitte warten", ipLabel: "IP-Adresse", ip: "z.B. 192.168.0.101", portLabel: "Port", port: "z.B. 8080", homefolder: "Heimatverzeichnis", password: "Passwort", passwordPlaceholder: "Wird nicht wieder angezeigt.", username: "Benutzername", usernamePlaceholder: "Tragen Sie hier nichts ein, wenn Sie es nicht konfiguriert haben.", save: "Speichern", saveSettingsButton: "Speichern", clearSettings: "Einstellungen l\u00f6schen", clearSettingsButton: "Einstellungen l\u00f6schen", faqHeadline: "FAQ", faqMessage: "Wenn sie die App zum ersten Mal starten, oder die Einstellungen gel\u00f6scht habe, tragen Sie die IP-Adresse und den Port ihres VLCs oben ein. Au\u00dferdem k\u00f6nnen Sie einen Start-Ordner und ein Passwort setzen (ab VLC-Version 2.1 ben\u00f6tigt). Bitte beachten Sie, dass der VLC manchmal etwas braucht, bevor er reagiert.", iconsHeadline: "Die Kn\u00f6pfe erkl\u00e4rt", iconHome: "Bringt Sie zum Player zur\u00fcck", iconRepeatOnce: "Wiederholt die Datei einmal", iconRepeatAll: "Wiederholt alle Dateien", iconShuffle: "Spielt zuf\u00e4llige Titel aus der Wiedergabeliste", muteMessage: "Der Player kann stumm geschaltet werden, in dem man auf die Lautst\u00e4rke dr\u00fcckt, bzw. andersherum.", aboutMeHeadline: "\u00dcber mich", aboutMeMessage: "Ich bin Student und Fan von Open-Source-Software. Das ist auch der Grund, warum die App kostenlos ist. Eine Anwendung f\u00fcr ein offendes Projekt wie den VLC-Player sollte kostenlos sein. Auf Grund der Regeln des Appstores kann ich kein Spenden-Button nutzen. Konstruktive Kritik ist jedoch willkommen, aber bitte denken Sie daran, dass die App kostenlos ist und die Entwicklung Zeit gekostet hat.", contactHeadline: "Kontakt", checkIpAndPort: "Konnte nicht verbinden. Bitte \u00fcberpr\u00fcfen Sie die IP und den Port.", usernameOrPasswordWrong: "Oh, der Nutzername oder das Password sind falsch.", checkSettings: "In den Einstellungen befindet sich ein Fehler.", connectedNoDir: "Verbunden, konnte den Ordner aber nicht finden.", settingsSaved: "Einstellungen gespeichert", settingsSavedRestart: "Einstellungen gespeichert, bitte App neustarten", setSettings: "Bitte geben Sie die Einstellungen an", lostConnection: "Verbindung zum VLC wurde unterbrochen" }; Languages.prototype.getLanguage = function () { "de" === navigator.language | "de-DE" === navigator.systemLanguage && ($.extend(plLang, german), this.setLanguage()) }; Languages.prototype.setLanguage = function () { $("#playerHeadline").text(plLang.player); $("#titleHeadline").text(plLang.title); $("#artistHeadline").text(plLang.artist); $("#albumHeadline").text(plLang.album); $("#yearHeadline").text(plLang.year); $("#ppHeadline").text(plLang.ppHeadline); $("#ppMessage").text(plLang.ppMessage); $("#clearPlaylist").text(plLang.clearPlaylist); $("#pipHeadline").text(plLang.pipHeadline); $("#removeItem").text(plLang.removeItem); $("#playlistHeadline").text(plLang.playlist); $("#libraryHeadline").text(plLang.library); $("#playAll").text(plLang.playAll); $("#setHome").text(plLang.setHomefolder); $("#settingsHeadline").text(plLang.settings); $("#spHeadline").text(plLang.spHeadline); $("#spMessage").text(plLang.spMessage); $("#ipLabel").text(plLang.ipLabel); $("#ip").attr("placeholder", plLang.ip); $("#portLabel").text(plLang.portLabel); $("#port").attr("placeholder", plLang.port); $("#homefolderLabel").text(plLang.homefolder); $("#passwordLabel").text(plLang.password); $("#password").prop("placeholder", plLang.passwordPlaceholder); $("#usernameLabel").text(plLang.username); $("#username").prop("placeholder", plLang.usernamePlaceholder); $("#saveLabel").text(plLang.save); $("#saveSettings").prev("span").find("span.ui-btn-text").text(plLang.saveSettingsButton); $("#clearSettingsLabel").text(plLang.clearSettings); $("#clearSettings").prev("span").find("span.ui-btn-text").text(plLang.clearSettingsButton); $("#faqHeadline").text(plLang.faqHeadline); null !== plLang.faqMessage && $("#faqMessage").text(plLang.faqMessage); $("#iconsHeadline").text(plLang.iconsHeadline); $("#iconHome").text(plLang.iconHome); $("#iconRepeatOnce").text(plLang.iconRepeatOnce); $("#iconRepeatAll").text(plLang.iconRepeatAll); $("#iconShuffle").text(plLang.iconShuffle); $("#muteMessage").text(plLang.muteMessage); $("#aboutMeHeadline").text(plLang.aboutMeHeadline); null !== plLang.aboutMeMessage && $("#aboutMeMessage").text(plLang.aboutMeMessage); $("#contactHeadline").text(plLang.contactHeadline) }; var app = { initialize: function () { this.bindEvents() }, bindEvents: function () { document.addEventListener("deviceready", this.onDeviceReady, !1) }, onDeviceReady: function () { app.receivedEvent("deviceready") }, receivedEvent: function (a) { init() } }; function init() { player = new Player; updater = new Updater; language = new Languages; $(document).bind("mobileinit", function () { $.support.cors = !0; $.mobile.allowCrossDomainPages = !0 }); language.getLanguage(); setupUi(); setupButtonUi(); player.loadHelper(); $("#player").on("pagebeforeshow", function (a) { $(".dot-active").removeClass("dot-active"); $(".playerDot").addClass("dot-active") }); $("#playlist").on("pageshow", function (a) { $("#playlistPopup").css("display", "none"); $(".dot-active").removeClass("dot-active"); $(".playlistDot").addClass("dot-active"); player.loadPlaylist() }); $("#library").on("pageshow", function (a) { $(".dot-active").removeClass("dot-active"); $(".libraryDot").addClass("dot-active"); $("#libraryPopup").css("display", "none"); player.loadFiles(plData.lastDir) }); $("#settings").on("pagebeforeshow", function (a) { $(".dot-active").removeClass("dot-active"); $(".settingsDot").addClass("dot-active") }) } function setupUi() { $(document).off("swipeleft").on("swipeleft", 'section[data-role="page"]', function (a) { if (!0 !== a.handled) { var b = $.mobile.activePage.next('section[data-role="page"]'); 0 < b.length ? $.mobile.changePage(b, "slide", !0, !0) : $.mobile.changePage("#player", "slide", !0, !0); a.handled = !0 } return !1 }); $(document).off("swiperight").on("swiperight", 'section[data-role="page"]', function (a) { if (!0 !== a.handled) { var b = $.mobile.activePage.prev("section"); 0 < b.length ? $.mobile.changePage(b, "slide", !0, !0) : $.mobile.changePage("#settings", "slide", !0, !0); a.handled = !0 } return !1 }) } function setupButtonUi() { $("[data-role=footer]").fixedtoolbar({ hideDuringFocus: "input, select" }); $("body").on("click", ".home", function (a) { a.preventDefault(); $.mobile.changePage("#player", "slide", !0, !0) }); $("body").on("click", ".playpause", function () { console.log("plData.state" + plData.state); "playing" === plData.state ? ($(this).removeClass("pause").addClass("play"), player.pause()) : ($(this).removeClass("play").addClass("pause"), player.play()) }); $("body").on("click", ".stop", function (a) { a.preventDefault(); $(".pause").removeClass("pause").addClass("play"); player.stop() }); $("body").on("click", ".forward", function (a) { a.preventDefault(); player.forward() }); $("body").on("click", ".previous", function (a) { a.preventDefault(); player.previous() }); $("body").on("click", "#repeat", function (a) { a.preventDefault(); player.repeat() }); $("body").on("click", "#repeat-all", function (a) { a.preventDefault(); player.repeatAll() }); $("body").on("click", "#random", function (a) { a.preventDefault(); player.random() }); $("body").on("click", "#volume-up", function (a) { a.preventDefault(); player.volume(1) }); $("body").on("click", "#volume", function (a) { a.preventDefault(); player.mute() }); $("body").on("click", "#volume-down", function (a) { a.preventDefault(); player.volume(-1) }); $("#positionSlider").on("slidestop", function () { player.jumpTo($(this).val()) }); $("body").on("click", "#options", function (a) { a.preventDefault(); "none" === $("#playlistPopup").css("display") ? $("#playlistPopup").css("display", "block") : $("#playlistPopup").css("display", "none") }); $("body").on("click", "#playlistPopup", function (a) { a.preventDefault(); $("#playlistPopup").css("display", "none") }); $("body").on("click", "#playlistItemPopup", function (a) { a.preventDefault(); $("#playlistItemPopup").css("display", "none") }); $("body").on("click", "#clearPlaylist", function (a) { a.preventDefault(); player.clearPlaylist() }); $("body").on("click", "#itemPopup", function (a) { a.preventDefault(); $("#itemPopup").css("display", "none") }); $("body").on("click", "#saveSettings", function (a) { a.preventDefault(); player.getSettings() }); $("body").on("click", "#clearSettings", function (a) { a.preventDefault(); player.clearSettings() }) };
